[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "poly-scribe-code-gen"
dynamic = ["version"]
description = 'Code generation for the poly-scribe library'
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = []
authors = [
  { name = "Pascal Palenda", email = "pascal.palenda@akustik.rwth-aachen.de" },
]
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "pywebidl2",
  "jinja2",
  "black",
  "isort",
  "annotated_types",
  "pydantic",
  "strenum",
  "pydantic-yaml",
  "cbor2",
]

[project.urls]
Documentation = "https://github.com/pingelit/poly-scribe#readme"
Issues = "https://github.com/pingelit/poly-scribe/issues"
Source = "https://github.com/pingelit/poly-scribe"

[project.scripts]
poly-scribe-code-gen = "poly_scribe_code_gen.cli:poly_scribe_code_gen"

[tool.hatch.version]
path = "src/poly_scribe_code_gen/__about__.py"

[tool.hatch.envs.default]
path = ".hatch"
dependencies = [
    "coverage[toml]>=6.5",
    "pytest",
    "pytest-mock",
    "ruff",
]

[tool.hatch.envs.default.scripts]
code-gen = "py src/poly_scribe_code_gen/__main__.py {args}"
test = "pytest tests {args:tests}"
test-cov = "coverage run -m pytest tests {args}"
cov-report = ["- coverage combine", "coverage report"]
cov-report-html = [
    "- coverage combine",
    "coverage html -d cov-report-html",
]
cov-report-xml = [
    "- coverage combine",
    "coverage xml",
]
cov = ["test-cov", "cov-report"]
cov-html = ["test-cov", "cov-report-html"]
cov-ci = ["test-cov", "cov-report-xml"]

[tool.hatch.envs.types]
extra-dependencies = ["mypy>=1.0.0"]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/poly_scribe_code_gen tests}"

[tool.ruff]
target-version = "py39"
line-length = 120

[tool.ruff.lint]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Okay to use random
  "S311",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.isort]
known-first-party = ["poly_scribe_code_gen"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "SLF001"]

[tool.coverage.run]
source_pkgs = ["poly_scribe_code_gen"]
branch = true
parallel = true
omit = ["src/poly_scribe_code_gen/__about__.py"]

[tool.coverage.paths]
poly_scribe_code_gen = ["src/poly_scribe_code_gen"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
