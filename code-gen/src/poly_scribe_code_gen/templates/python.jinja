from enum import IntEnum
from typing import List, Dict, Tuple, Union, Any, Annotated, Literal

from pydantic import BaseModel, Field
from annotated_types import Len


{% for def_name, def_data in typedefs.items() %}
{{ def_name }} = {{ def_data.type }}
{% endfor %}


{% for enum_name, enum_data in enums.items() %}
class {{ enum_name }}(IntEnum):
    {% for value in enum_data["values"] %}
    {{ value.name }} = {{ loop.index0 }}
    {% endfor %}
{% endfor %}


{% for struct in structs%}
class {{ struct.name }}{% if struct.inheritance %}({{ struct.inheritance }}){% else %}(BaseModel){% endif %}:
    {% for member in struct.members %}
    {{ member.name }}: {{ member.type }}{% if member.default %} = "{{ member.default }}"{% endif +%}
    {% endfor %}
    {% if not struct.members %}
    pass
    {% endif %}


{% endfor%}